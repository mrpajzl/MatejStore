// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rbPHTCCgxa1NtQh9SvuYvu
// Component: MXvMmBE7ryTu3
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import Ratings from "../../Ratings"; // plasmic-import: oRvUkHBF3bcFzv/component
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_furn_e_commerce.module.css"; // plasmic-import: rbPHTCCgxa1NtQh9SvuYvu/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: MXvMmBE7ryTu3/css
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart"; // plasmic-import: C6Vuon0-RgWq-W/icon
import HeartOIcon from "./icons/PlasmicIcon__HeartO"; // plasmic-import: v51A-rNPqee2i7/icon
import ExpandIcon from "./icons/PlasmicIcon__Expand"; // plasmic-import: Tvxl9UoaY6t246/icon

export const PlasmicProductCard__VariantProps = new Array(
  "withReviews",
  "onSale"
);

export const PlasmicProductCard__ArgProps = new Array("image", "ratings");

function PlasmicProductCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootonSale]: hasVariant(variants, "onSale", "onSale"),
          [sty.rootwithReviews]: hasVariant(
            variants,
            "withReviews",
            "withReviews"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div className={classNames(projectcss.all, sty.freeBox__j13X)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <ProductMedia
              className={classNames("__wab_instance", sty.productMedia__muEaE)}
            />
          ),

          value: args.image
        })}

        {(hasVariant(variants, "onSale", "onSale") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__g3Srq, {
              [sty.freeBoxonSale__g3SrqN3PTs]: hasVariant(
                variants,
                "onSale",
                "onSale"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nD5A
              )}
            >
              {"Sale"}
            </div>
          </div>
        ) : null}

        {(triggers.hover_root ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cbicg)}
          >
            <ShoppingCartIcon
              className={classNames(projectcss.all, sty.svg__bGa4V)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__part8
              )}
            >
              {"Add to cart"}
            </div>

            <HeartOIcon
              className={classNames(projectcss.all, sty.svg__l2UqH)}
              role={"img"}
            />

            <ExpandIcon
              className={classNames(projectcss.all, sty.svg__mFx5A)}
              role={"img"}
            />
          </p.Stack>
        ) : null}
      </div>

      {(hasVariant(variants, "withReviews", "withReviews") ? true : true)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <Ratings
                className={classNames("__wab_instance", sty.ratings__td03Y)}
              />
            ),

            value: args.ratings
          })
        : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__u4D9)}
      >
        <ProductTextField
          data-plasmic-name={"productTextField"}
          data-plasmic-override={overrides.productTextField}
          className={classNames("__wab_instance", sty.productTextField)}
          field={"name"}
        />

        <ProductPriceComponent
          data-plasmic-name={"productPrice"}
          data-plasmic-override={overrides.productPrice}
          className={classNames("__wab_instance", sty.productPrice)}
        />
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "productTextField", "productPrice"],
  productTextField: ["productTextField"],
  productPrice: ["productPrice"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productTextField: makeNodeComponent("productTextField"),
    productPrice: makeNodeComponent("productPrice"),
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
