// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rbPHTCCgxa1NtQh9SvuYvu
// Component: 3lBDsZTQiUGit
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import LinkButton from "../../LinkButton"; // plasmic-import: dlrqhj701dimA/component
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_furn_e_commerce.module.css"; // plasmic-import: rbPHTCCgxa1NtQh9SvuYvu/projectcss
import sty from "./PlasmicFeatureItem.module.css"; // plasmic-import: 3lBDsZTQiUGit/css

export const PlasmicFeatureItem__VariantProps = new Array();

export const PlasmicFeatureItem__ArgProps = new Array();

function PlasmicFeatureItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <ProductBox
        data-plasmic-name={"productBox"}
        data-plasmic-override={overrides.productBox}
        className={classNames("__wab_instance", sty.productBox)}
        id={"unlimited-table-collection"}
      >
        <ph.DataCtxReader>
          {$ctx => (
            <>
              <div className={classNames(projectcss.all, sty.freeBox___6DqQb)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__hfRvR)}
                />

                <div className={classNames(projectcss.all, sty.freeBox__m1Tit)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ys0US)}
                  >
                    <ProductTextField
                      className={classNames(
                        "__wab_instance",
                        sty.productTextField__ifK7
                      )}
                      field={"name"}
                    />

                    <ProductTextField
                      className={classNames(
                        "__wab_instance",
                        sty.productTextField__eG74W
                      )}
                      field={"description"}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__iciBr)}
                    >
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"Starting from "}
                      </div>

                      <ProductPriceComponent
                        data-plasmic-name={"productPrice"}
                        data-plasmic-override={overrides.productPrice}
                        className={classNames(
                          "__wab_instance",
                          sty.productPrice
                        )}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ka22E)}
                    >
                      <LinkButton
                        data-plasmic-name={"linkButton"}
                        data-plasmic-override={overrides.linkButton}
                        className={classNames("__wab_instance", sty.linkButton)}
                        text={"View More"}
                        type={"solidOrange"}
                      />
                    </p.Stack>
                  </p.Stack>
                </div>
              </div>

              <ProductMedia
                data-plasmic-name={"productMedia"}
                data-plasmic-override={overrides.productMedia}
                className={classNames("__wab_instance", sty.productMedia)}
              />
            </>
          )}
        </ph.DataCtxReader>
      </ProductBox>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "productBox",
    "text",
    "productPrice",
    "linkButton",
    "productMedia"
  ],

  productBox: [
    "productBox",
    "text",
    "productPrice",
    "linkButton",
    "productMedia"
  ],

  text: ["text"],
  productPrice: ["productPrice"],
  linkButton: ["linkButton"],
  productMedia: ["productMedia"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFeatureItem__ArgProps,
          internalVariantPropNames: PlasmicFeatureItem__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicFeatureItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeatureItem";
  } else {
    func.displayName = `PlasmicFeatureItem.${nodeName}`;
  }
  return func;
}

export const PlasmicFeatureItem = Object.assign(
  // Top-level PlasmicFeatureItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productBox: makeNodeComponent("productBox"),
    text: makeNodeComponent("text"),
    productPrice: makeNodeComponent("productPrice"),
    linkButton: makeNodeComponent("linkButton"),
    productMedia: makeNodeComponent("productMedia"),
    // Metadata about props expected for PlasmicFeatureItem
    internalVariantProps: PlasmicFeatureItem__VariantProps,
    internalArgProps: PlasmicFeatureItem__ArgProps
  }
);

export default PlasmicFeatureItem;
/* prettier-ignore-end */
